import { IEventMap } from "./types";
/**
* Checks if the specified class value exists in the element's class attribute.
* @memberof DOM
* @param element - target
* @param className - the class name to search
* @return {boolean} return false if the class is not found.
* @example
import {hasClass} from "utility";

console.log(hasClass(element, "start")); // true or false
*/
export declare function hasClass(element: Element, className: string): boolean;
/**
* Add the specified class value. If these classe already exist in the element's class attribute they are ignored.
* @memberof DOM
* @param element - target
* @param className - the class name to add
* @example
import {addClass} from "utility";

addClass(element, "start");
*/
export declare function addClass(element: Element, className: string): void;
/**
* Removes the specified class value.
* @memberof DOM
* @param element - target
* @param className - the class name to remove
* @example
import {removeClass} from "utility";

removeClass(element, "start");
*/
export declare function removeClass(element: Element, className: string): void;
export declare function getDocument(el?: Node): Document;
export declare function getDocumentElement(el?: Node): HTMLElement;
export declare function getDocumentBody(el?: Node): HTMLElement;
export declare function isWindow(val: any): val is Window;
export declare function isNode(el?: any): el is Node;
export declare function getWindow(el?: Node): Window & typeof globalThis;
export declare function addEvent<K extends keyof IEventMap>(el: EventTarget, type: K, listener: (e: IEventMap[K]) => void, options?: boolean | AddEventListenerOptions): void;
export declare function removeEvent<K extends keyof IEventMap>(el: EventTarget, type: K, listener: (e: IEventMap[K]) => void, options?: boolean | EventListenerOptions): void;
