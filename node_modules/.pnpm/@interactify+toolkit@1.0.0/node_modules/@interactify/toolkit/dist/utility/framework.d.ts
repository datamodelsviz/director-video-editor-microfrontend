export declare function prefixNames(prefix: string, ...classNames: string[]): string;
export declare function ref(target: any, name: string): (e: any) => void;
export declare function refs(target: any, name: string, i: number): (e: any) => void;
export declare function prefixCSS(prefix: string, css: string): string;
export type ParametersType<Func, Return> = Func extends (...params: infer Params) => any ? (...params: Params) => Return : never;
export type ExcludeInterface<Obj1, Obj2> = {
    [key in Exclude<keyof Obj1, keyof Obj2>]: Obj1[key];
};
export type UniqueMethodInterface<Methods, Target extends Methods, ReturnTarget extends any, Duplicate extends {
    [key: string]: any;
}> = {
    [key in keyof ExcludeInterface<Methods, Duplicate>]: Methods[key] extends (...params: any[]) => Target ? ParametersType<Methods[key], ReturnTarget> : Methods[key];
};
export type Entries<Obj extends {
    [key: string]: any;
}, Key = keyof Obj> = Key extends string ? [Key, Obj[Key]] : never;
export type ReverseKey<Key extends string, Obj extends {
    [key: string]: any;
}, E = Entries<Obj>> = E extends [infer Value, Key] ? Value : never;
export type ChangedMethodInterface<Methods, Target extends Methods, ReturnTarget extends any, Duplicate extends {
    [key: string]: any;
}> = {
    [key in Duplicate[keyof Duplicate]]: Methods[ReverseKey<key, Duplicate> & keyof Methods] extends (...params: any[]) => Target ? ParametersType<Methods[ReverseKey<key, Duplicate> & keyof Methods], ReturnTarget> : Methods[ReverseKey<key, Duplicate> & keyof Methods];
};
export type MethodInterface<Methods, Target extends Methods, ReturnTarget extends any, Duplicate extends {
    [key: string]: any;
} = {}> = UniqueMethodInterface<Methods, Target, ReturnTarget, Duplicate> & ChangedMethodInterface<Methods, Target, ReturnTarget, Duplicate>;
