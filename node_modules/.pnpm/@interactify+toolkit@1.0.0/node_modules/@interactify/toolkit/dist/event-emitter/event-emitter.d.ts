import { EventListener, EventHash, OnEvent, TargetParam } from "./types";
/**
 * Implement EventEmitter on object or component.
 */
declare class EventEmitter<Events extends {} = {
    [key: string]: {
        [key: string]: any;
    };
}> {
    private _events;
    on<Name extends keyof Events, Param = Events[Name]>(eventName: Name, listener: EventListener<Param, this>): this;
    on(events: EventHash<Events, this>): this;
    off<Name extends keyof Events, Param = Events[Name]>(eventName?: Name, listener?: EventListener<Param, this>): this;
    off(events: EventHash<Events, this>): this;
    /**
     * Add a disposable listener and Use promise to the registered event.
     * @param - Name of the event to be added
     * @param - disposable listener function of the event to be added
     * @example
     * import EventEmitter from "@scena/event-emitter";
     * cosnt emitter = new EventEmitter();
     *
     * // Add a disposable listener in "a" event
     * emitter.once("a", () => {
     * });
     *
     * // Use Promise
     * emitter.once("a").then(e => {
     * });
     */
    once<Name extends keyof Events & string, Param = Events[Name]>(eventName: Name, listener?: EventListener<Param, this>): Promise<OnEvent<Param, this>>;
    emit<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends Param ? Name : never): boolean;
    emit<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;
    trigger<Name extends keyof Events, Param = Events[Name]>(eventName: {} extends TargetParam<Param> ? Name : never): boolean;
    trigger<Name extends keyof Events, Param = Events[Name]>(eventName: Name, param: TargetParam<Param>): boolean;
    private _addEvent;
}
export default EventEmitter;
