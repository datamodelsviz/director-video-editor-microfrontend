import { IResult } from "./types";
import ListDiffer from "./list-differ";
/**
 * A module that tracks changes in child elements including additions, removals, and reordering.
 * @extends eg.ListDiffer
 */
declare class ChildrenDiffer<T extends Element = Element> extends ListDiffer<T> {
    /**
     * @param - Initializing Children <ko> 초기 설정할 자식 노드들</ko>
     */
    constructor(list?: any[]);
}
export default ChildrenDiffer;
/**
 * Computes the difference between two arrays of elements
 * @memberof eg.ChildrenDiffer
 * @static
 * @function
 * @param {T[]} prevList - Previous array of elements
 * @param {T[]} list - New array of elements to compare against
 * @return {IResult<T>} Object containing the following differences:
 * - prevList: Original list before updates
 * - list: New updated list
 * - added: Array of indices where new elements were added
 * - removed: Array of indices where elements were removed
 * - changed: Array of [prevIndex, newIndex] pairs showing position changes
 * - pureChanged: Array of direct position moves
 * - ordered: Array of moves needed to synchronize the lists
 * - maintained: Array of elements that were preserved between lists
 * @example
 * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1]);
 *
 * result.prevList;   // [1, 2, 3, 4, 5]
 * result.list;       // [4, 3, 6, 2, 1]
 * result.added;      // [0, 1, 5]
 * result.removed;    // [5]
 * result.changed;    // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
 * result.pureChanged; // [[4, 3], [3, 4], [2, 6]]
 * result.ordered;    // [[4, 1], [4, 2], [4, 3]]
 * result.maintained; // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]
 */
export declare function diff<T extends Element = Element>(prevList: T[], list: T[]): IResult<T>;
