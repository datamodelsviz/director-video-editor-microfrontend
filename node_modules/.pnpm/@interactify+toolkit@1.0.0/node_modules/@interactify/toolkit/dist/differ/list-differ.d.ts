type Key = string | number;
type ChangedItem = [number, number];
type ChangedBeforeAdded = [number, number];
type List<ItemType> = ItemType[];
declare class Result<ItemType> {
    prevList: List<ItemType>;
    list: List<ItemType>;
    added: number[];
    removed: number[];
    changed: ChangedItem[];
    maintained: ChangedItem[];
    changedBeforeAdded: ChangedBeforeAdded[];
    fixed: boolean[];
    private cacheOrdered?;
    private cachePureChanged?;
    constructor(prevList: List<ItemType>, list: List<ItemType>, added: number[], removed: number[], changed: ChangedItem[], maintained: ChangedItem[], changedBeforeAdded: ChangedBeforeAdded[], fixed: boolean[]);
    get ordered(): ChangedItem[];
    get pureChanged(): ChangedItem[];
    private calculateOrdered;
}
export declare function diff<ItemType>(prevList: List<ItemType>, list: List<ItemType>, findKeyCallback?: (e: ItemType) => Key): Result<ItemType>;
declare class ListDiffer<ItemType> {
    private findKeyCallback;
    private list;
    constructor(list?: List<ItemType>, findKeyCallback?: (e: ItemType) => Key);
    update(list: List<ItemType>): Result<ItemType>;
    static diff: typeof diff;
}
export default ListDiffer;
