import { Rect } from "./types";
/**
 * Gets the size of a shape (polygon) made of points.
 * @memberof OverlapArea
 */
export declare function getAreaSize(points: number[][]): number;
/**
 * Add all the numbers.
 * @function
 * @memberof Utils
 */
export declare function sum(nums: number[]): number;
/**
 * Get the points of the overlapped part of two shapes.
 * @function
 * @memberof OverlapArea
 */
export declare function getOverlapPoints(points1: number[][], points2: number[][]): number[][];
/**
 * Convert two points into lines.
 * @function
 * @memberof OverlapArea
 */
export declare function convertLines(points: number[][]): number[][][];
/**
 * Get the coefficient of the linear function. [a, b, c] (ax + by + c = 0)
 * @return [a, b, c]
 * @memberof OverlapArea
 */
export declare function getLinearConstants(point1: number[], point2: number[]): [number, number, number];
/**
 * Get intersection points with linear functions.
 * @memberof OverlapArea
 */
export declare function getIntersectionPointsByConstants(linearConstants1: number[], linearConstants2: number[]): number[][];
/**
 * Get the points on the lines (between two points).
 * @memberof OverlapArea
 */
export declare function getPointsOnLines(points: number[][], lines: number[][][]): number[][];
/**
 * Whether the point is in shape
 * @param - point pos
 * @param - shape points
 * @param - whether to check except line
 * @memberof OverlapArea
 */
export declare function isInside(pos: number[], points: number[][], excludeLine?: boolean): boolean;
/**
 * Get the minimum and maximum points of the points.
 * @memberof OverlapArea
 */
export declare function getMinMaxs(points: number[][]): {
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
};
/**
 * Get points that fit the rect,
 * @memberof OverlapArea
 */
export declare function fitPoints(points: number[][], rect: Rect): number[][];
/**
 * Gets the size of the overlapped part of two shapes.
 * @function
 * @memberof OverlapArea
 */
export declare function getOverlapSize(points1: number[][], points2: number[][]): number;
