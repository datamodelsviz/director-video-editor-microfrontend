"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const serverless_client_1 = require("@remotion/serverless-client");
const bun_test_1 = require("bun:test");
const make_lambda_payload_1 = require("../make-lambda-payload");
(0, bun_test_1.test)('Should include concurrency field in payload', async () => {
    const payload = await (0, make_lambda_payload_1.makeLambdaRenderMediaPayload)({
        region: 'us-east-1',
        functionName: 'test-function',
        serveUrl: 'https://example.com',
        composition: 'test-composition',
        inputProps: {},
        codec: 'h264',
        imageFormat: 'jpeg',
        crf: undefined,
        envVariables: {},
        pixelFormat: undefined,
        proResProfile: undefined,
        x264Preset: null,
        privacy: 'public',
        jpegQuality: 80,
        maxRetries: 1,
        framesPerLambda: null,
        concurrency: 10,
        logLevel: 'info',
        frameRange: null,
        outName: null,
        timeoutInMilliseconds: 30000,
        chromiumOptions: {},
        scale: 1,
        everyNthFrame: 1,
        numberOfGifLoops: null,
        concurrencyPerLambda: 1,
        downloadBehavior: { type: 'play-in-browser' },
        muted: false,
        overwrite: false,
        audioBitrate: null,
        videoBitrate: null,
        encodingMaxRate: null,
        encodingBufferSize: null,
        webhook: null,
        forceHeight: null,
        forceWidth: null,
        rendererFunctionName: null,
        forceBucketName: null,
        audioCodec: null,
        colorSpace: null,
        deleteAfter: null,
        indent: false,
        forcePathStyle: false,
        metadata: null,
        apiKey: null,
        offthreadVideoCacheSizeInBytes: null,
        offthreadVideoThreads: null,
        storageClass: null,
        requestHandler: null,
        preferLossless: false,
    });
    (0, bun_test_1.expect)(payload.type).toBe(serverless_client_1.ServerlessRoutines.start);
    (0, bun_test_1.expect)(payload.concurrency).toBe(10);
});
(0, bun_test_1.test)('Should handle null concurrency', async () => {
    const payload = await (0, make_lambda_payload_1.makeLambdaRenderMediaPayload)({
        region: 'us-east-1',
        functionName: 'test-function',
        serveUrl: 'https://example.com',
        composition: 'test-composition',
        inputProps: {},
        codec: 'h264',
        imageFormat: 'jpeg',
        crf: undefined,
        envVariables: {},
        pixelFormat: undefined,
        proResProfile: undefined,
        x264Preset: null,
        privacy: 'public',
        jpegQuality: 80,
        maxRetries: 1,
        framesPerLambda: null,
        concurrency: null,
        logLevel: 'info',
        frameRange: null,
        outName: null,
        timeoutInMilliseconds: 30000,
        chromiumOptions: {},
        scale: 1,
        everyNthFrame: 1,
        numberOfGifLoops: null,
        concurrencyPerLambda: 1,
        downloadBehavior: { type: 'play-in-browser' },
        muted: false,
        overwrite: false,
        audioBitrate: null,
        videoBitrate: null,
        encodingMaxRate: null,
        encodingBufferSize: null,
        webhook: null,
        forceHeight: null,
        forceWidth: null,
        rendererFunctionName: null,
        forceBucketName: null,
        audioCodec: null,
        colorSpace: null,
        deleteAfter: null,
        indent: false,
        forcePathStyle: false,
        metadata: null,
        apiKey: null,
        offthreadVideoCacheSizeInBytes: null,
        offthreadVideoThreads: null,
        storageClass: null,
        requestHandler: null,
        preferLossless: false,
    });
    (0, bun_test_1.expect)(payload.type).toBe(serverless_client_1.ServerlessRoutines.start);
    (0, bun_test_1.expect)(payload.concurrency).toBe(null);
});
