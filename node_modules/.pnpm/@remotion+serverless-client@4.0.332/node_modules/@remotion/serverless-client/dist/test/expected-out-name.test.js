"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bun_test_1 = require("bun:test");
const expected_out_name_1 = require("../expected-out-name");
const bucketName = 'remotionlambda-98fsduf';
const testRenderMetadata = {
    compositionId: 'react-svg',
    estimatedRenderLambdaInvokations: 100,
    estimatedTotalLambdaInvokations: 100,
    framesPerLambda: 20,
    imageFormat: 'png',
    type: 'video',
    inputProps: {
        type: 'payload',
        payload: '{}',
    },
    lambdaVersion: '2022-02-14',
    memorySizeInMb: 2048,
    functionName: 'remotion-render-4-0-187-mem3000mb-disk10000mb-120sec',
    rendererFunctionName: 'remotion-render-4-0-187-mem3000mb-disk10000mb-120sec',
    outName: undefined,
    region: 'eu-central',
    renderId: '9n8dsfafs',
    siteId: 'my-site',
    startedDate: Date.now(),
    totalChunks: 20,
    privacy: 'public',
    everyNthFrame: 1,
    frameRange: [0, 199],
    audioCodec: null,
    deleteAfter: null,
    numberOfGifLoops: null,
    downloadBehavior: { type: 'play-in-browser' },
    audioBitrate: null,
    muted: false,
    metadata: null,
    codec: 'h264',
    dimensions: {
        width: 1920,
        height: 1080,
    },
    scale: 1,
};
(0, bun_test_1.test)('Should get a custom outname', () => {
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: testRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        renderBucketName: 'remotionlambda-98fsduf',
        key: 'renders/9n8dsfafs/out.mp4',
    });
});
(0, bun_test_1.test)('Should save to a different outname', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        outName: {
            bucketName: 'my-bucket',
            key: 'my-key',
        },
    };
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: newRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        renderBucketName: 'my-bucket',
        key: 'my-key',
    });
});
(0, bun_test_1.test)('For stills', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        codec: null,
        type: 'still',
        imageFormat: 'png',
    };
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: newRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        renderBucketName: 'remotionlambda-98fsduf',
        key: 'renders/9n8dsfafs/out.png',
    });
});
(0, bun_test_1.test)('Just a custom name', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        type: 'still',
        imageFormat: 'jpeg',
        codec: null,
        outName: 'justaname.jpeg',
    };
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: newRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        renderBucketName: 'remotionlambda-98fsduf',
        key: 'renders/9n8dsfafs/justaname.jpeg',
    });
});
(0, bun_test_1.test)('Should throw on invalid names', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        type: 'still',
        imageFormat: 'png',
        codec: null,
        outName: 'ðŸ‘º.jpeg',
    };
    (0, bun_test_1.expect)(() => {
        (0, expected_out_name_1.getExpectedOutName)({
            renderMetadata: newRenderMetadata,
            bucketName,
            customCredentials: null,
            bucketNamePrefix: 'remotionlambda-',
        });
    }).toThrow(/The S3 Key must match the RegExp/);
});
(0, bun_test_1.test)('Should allow outName an outname with a slash', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        codec: null,
        audioCodec: null,
        type: 'still',
        imageFormat: 'jpeg',
        outName: 'justa/name.jpeg',
    };
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: newRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        key: 'renders/9n8dsfafs/justa/name.jpeg',
        renderBucketName: 'remotionlambda-98fsduf',
    });
});
(0, bun_test_1.test)('Should allow outName an outname with colon', () => {
    const newRenderMetadata = {
        ...testRenderMetadata,
        codec: null,
        audioCodec: null,
        type: 'still',
        imageFormat: 'jpeg',
        outName: 'ap-east-1:xxxxxx/video/XXXXX-0b9ba84XXXX.mp4',
    };
    (0, bun_test_1.expect)((0, expected_out_name_1.getExpectedOutName)({
        renderMetadata: newRenderMetadata,
        bucketName,
        customCredentials: null,
        bucketNamePrefix: 'remotionlambda-',
    })).toEqual({
        customCredentials: null,
        key: 'renders/9n8dsfafs/ap-east-1:xxxxxx/video/XXXXX-0b9ba84XXXX.mp4',
        renderBucketName: 'remotionlambda-98fsduf',
    });
});
